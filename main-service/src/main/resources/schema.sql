drop table IF EXISTS users, categories, location, events, requests, compilations, compilations_events;

create TABLE IF NOT EXISTS users (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  email VARCHAR(255) NOT NULL UNIQUE,
  name VARCHAR(255) NOT NULL
);

create TABLE IF NOT EXISTS categories (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  name VARCHAR(50) NOT NULL
);

create TABLE IF NOT EXISTS location (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  lat FLOAT NOT NULL,
  lon FLOAT NOT NULL
);

create TABLE IF NOT EXISTS events (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  annotation VARCHAR(2000),
  category_id BIGINT REFERENCES categories (id) ON delete CASCADE ON update CASCADE,
  created_on TIMESTAMP NOT NULL,
  description VARCHAR(7000) NOT NULL,
  event_date TIMESTAMP NOT NULL,
  initiator_id BIGINT REFERENCES users (id) ON delete CASCADE ON update CASCADE,
  location_id BIGINT REFERENCES location (id) ON delete CASCADE ON update CASCADE,
  paid BOOLEAN NOT NULL,
  participant_limit INTEGER NOT NULL,
  published_on TIMESTAMP,
  request_moderation BOOLEAN NOT NULL,
  state VARCHAR NOT NULL,
  title VARCHAR(120) NOT NULL,
  confirmed_requests INTEGER
);

create TABLE IF NOT EXISTS requests (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  created TIMESTAMP NOT NULL,
  event_id BIGINT REFERENCES events (id) ON delete CASCADE ON update CASCADE,
  requester_id BIGINT REFERENCES users (id) ON delete CASCADE ON update CASCADE,
  status VARCHAR(20) NOT NULL
);

create TABLE IF NOT EXISTS compilations (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  pinned BOOLEAN NOT NULL,
  title VARCHAR(50) NOT NULL
);

create TABLE IF NOT EXISTS compilations_events (
  compilation_id BIGINT REFERENCES compilations (id),
  event_id BIGINT REFERENCES events (id)
);

create TABLE IF NOT EXISTS COMMENTS (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  text VARCHAR(3000) NOT NULL,
  author_id BIGINT REFERENCES users(id) NOT NULL,
  event_id BIGINT REFERENCES events(id) NOT NULL,
  created TIMESTAMP NOT NULL,
  edited TIMESTAMP
);